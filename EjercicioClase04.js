
//--------------------------EJERCICIO CLASE 4-----------------------------//
// Misi√≥n 1: 
// 1.  Crea un array con 10 objetos, donde cada objeto represente un autom√≥vil con la 
// siguiente informaci√≥n: 
// ‚óã  Marca 
// ‚óã  Modelo 
// ‚óã  A√±o 
// ‚óã  Color

// 2.Usa un m√©todo de array para recorrer la lista e imprime por consola todos los datos 
// de los autom√≥viles cuyo a√±o sea mayor a 2018. 
// Mat√≠as a√±ade: ‚ÄúQueremos que veas esto como un ejercicio para prepararte para trabajar 
// con datos reales en el futuro‚Äù. 

// Ejercicio 2 - An√°lisis de Colores: 
// Impresionados con tu avance, Mat√≠as y Sabrina suben un poco la dificultad. Sabrina te 
// plantea:  

// ‚ÄúQueremos saber si puedes analizar la informaci√≥n de forma espec√≠fica. 
// Aqu√≠ tienes tu pr√≥ximo desaf√≠o‚Äù. 


// Misi√≥n 2: 
// 1.  Crea una funci√≥n que recorra el array de autom√≥viles. 
// 2.  Usa destructuring dentro de la funci√≥n para obtener el color de cada autom√≥vil. 
// 3.  La funci√≥n debe aceptar un color como par√°metro y devolver por consola cu√°ntos 
// autom√≥viles tienen ese color. 
// ‚ÄúEste tipo de habilidad es esencial para manejar sistemas din√°micos‚Äù, explica Mat√≠as. 
// ¬øEst√°s listo para superar esta prueba y demostrar tu capacidad para manipular datos con 
// precisi√≥n? ¬°Adelante! 

const autom√≥viles = [
    {
      Marca: 'Toyota',
      Modelo: 'Corolla',
      A√±o: 2007,
      Color: 'Plateado'
    },
    {
      Marca: 'Ford',
      Modelo: 'Focus',
      A√±o: 2012,
      Color: 'Negro'
    },
    {
      Marca: 'Chevrolet',
      Modelo: 'Cruze',
      A√±o: 2015,
      Color: 'Blanco'
    },
    {
      Marca: 'Honda',
      Modelo: 'Civic',
      A√±o: 2018,
      Color: 'Rojo'
    },
    {
      Marca: 'Volkswagen',
      Modelo: 'Golf',
      A√±o: 2020,
      Color: 'Gris'
    },
    {
      Marca: 'Nissan',
      Modelo: 'Sentra',
      A√±o: 2019,
      Color: 'Azul'
    },
    {
      Marca: 'Hyundai',
      Modelo: 'Elantra',
      A√±o: 2021,
      Color: 'Verde'
    },
    {
      Marca: 'Kia',
      Modelo: 'Rio',
      A√±o: 2016,
      Color: 'Negro'
    },
    {
      Marca: 'Peugeot',
      Modelo: '208',
      A√±o: 2022,
      Color: 'Gris oscuro'
    },
    {
      Marca: 'Renault',
      Modelo: 'Logan',
      A√±o: 2014,
      Color: 'Bord√≥'
    }
  ];
  const autosRecientes = autom√≥viles.filter(auto => auto.A√±o > 2018);

  autosRecientes.forEach(auto => {
    console.log(`Marca: ${auto.Marca}, Modelo: ${auto.Modelo}, A√±o: ${auto.A√±o}, Color: ${auto.Color}`);
  });

  function contarAutosPorColor(automoviles, colorBuscado) {
    let contador = 0;
  
    automoviles.forEach(auto => {
      const { Color } = auto; // destructuring para obtener solo el color
  
      if (Color.toLowerCase() === colorBuscado.toLowerCase()) {
        contador++;
      }
    });
  
    console.log(`Hay ${contador} autom√≥vil(es) de color ${colorBuscado}.`);
  }
  

contarAutosPorColor(autom√≥viles, "Negro");      // Deber√≠a decir: Hay 2 autom√≥vil(es) de color Negro.
contarAutosPorColor(autom√≥viles, "Rojo");       // Hay 1 autom√≥vil(es) de color Rojo.
contarAutosPorColor(autom√≥viles, "Gris");       // Hay 1 autom√≥vil(es) de color Gris.
contarAutosPorColor(autom√≥viles, "Verde");      // Hay 1 autom√≥vil(es) de color Verde.
contarAutosPorColor(autom√≥viles, "Violeta");    // ]Hay 0 automovil(es) de color Violeta.

// 1.  ¬øCu√°ndo es m√°s √∫til utilizar objetos literales frente a clases o funciones 
// constructoras? 
// 2.  ¬øQu√© ventajas ofrece el destructuring en la simplificaci√≥n de c√≥digo? 
// 3.  ¬øEn qu√© situaciones puede ser √∫til combinar objetos y arrays con el spread 
// operator? 

// Objetos literales son m√°s √∫tiles cuando:

// Necesit√°s crear una √∫nica instancia de un objeto.

// No necesit√°s reutilizar la estructura o comportamiento en m√∫ltiples lugares.

// Est√°s trabajando con datos simples o est√°ticos.

// Quer√©s representar algo sin l√≥gica compleja (como configuraciones, datos JSON, etc.).

//  Ejemplo:

const config = {
  apiKey: '123abc',
  mode: 'dev',
  debug: true
};
// ‚úÖ √ötil para: Configuraci√≥n, respuestas de APIs, datos de prueba, etc.

// Clases o funciones constructoras son preferibles cuando:

// Necesit√°s crear m√∫ltiples objetos con la misma estructura o comportamiento.

// Vas a usar m√©todos compartidos entre instancias.

// Trabaj√°s con l√≥gica m√°s compleja, herencia, o estructuras orientadas a objetos.

// üîß Ejemplo:


class Usuario {
  constructor(nombre, email) {
    this.nombre = nombre;
    this.email = email;
  }

  saludar() {
    return `Hola, soy ${this.nombre}`;
  }
}
//  √ötil para: Modelos de usuarios, productos, clases de negocio, etc.

//  2. ¬øQu√© ventajas ofrece el destructuring en la simplificaci√≥n de c√≥digo?
// Destructuring ayuda a escribir c√≥digo m√°s limpio, legible y conciso. Entre sus ventajas:

// Acceso directo a propiedades o elementos sin escribir repeticiones:


const persona2 = { nombre2: "Ana", edad2: 25 };
const { nombre2, edad2 } = persona2;
// En vez de: persona.nombre, persona.edad
//  Evita l√≠neas innecesarias y hace que el c√≥digo sea m√°s expresivo.

//  Funciona bien con funciones:

function saludar({ nombre }) {
  console.log(`Hola, ${nombre}`);
 }

// Se puede usar en arrays, objetos, par√°metros, valores por defecto, renombrado, y destructuring anidado.

//  3. ¬øEn qu√© situaciones puede ser √∫til combinar objetos y arrays con el spread operator?
// El spread operator (...) es s√∫per √∫til en casos como:

// Copiar arrays u objetos sin afectar el original (inmutabilidad):

const original = [1, 2, 3];
const copia = [...original];
// Fusionar arrays u objetos:

const a = [1, 2];
const b = [3, 4];
const combinado = [...a, ...b]; // [1,2,3,4]

const obj1 = { x: 1 };
const obj2 = { y: 2 };
const combinadoObj = { ...obj1, ...obj2 }; // {x: 1, y: 2}
// Actualizar un objeto sin mutarlo:

const usuario = { nombre: 'Ana', edad: 25 };
const actualizado = { ...usuario, edad: 26 }; // sin modificar el original

// Agregar elementos a arrays sin usar .push() (inmutable):

const lista = [1, 2];
const nuevaLista = [...lista, 3]; // [1, 2, 3]
